@using Sitecore.XA.Feature.Events.Models
@using Sitecore.XA.Foundation.MarkupDecorator.Extensions
@using Sitecore.XA.Foundation.RenderingVariants.Extensions
@using Sitecore.XA.Foundation.SitecoreExtensions.Extensions

@model EventListRenderingModel

@{
  bool isVisible = (ViewData["eventListVisible"] == null || (bool)ViewData["eventListVisible"]);
  int index = 0;
}

@if (isVisible)
{
  if (!(Model.Rendering.DataSourceItem == null && !Html.Sxa().IsEdit))
  {
    <div @Html.Sxa().Component(Model.Rendering.RenderingCssClass ?? "event-list", Model.Attributes)>
      <div class="component-content">
        <div class="tb-eventlist-container">
          <div class="d-flex">
            <div class="tb-page-title-container tb-header-3">
              @Html.Sxa().RenderHeading(Model.HeadingTag, Model.DataSourceItem, "Title", Model.GetRenderingWebEditingParams())
            </div>
          </div>
          @if (Html.Sxa().IsEdit && Model.Rendering.DataSourceItem == null)
          {
            @Model.MessageIsEmpty
          }

          @if (Model.Rendering.DataSourceItem != null && !Model.EventItems.Any())
          {
            using (Html.Sxa().BeginEditFrame(Html.Sitecore().CurrentRendering.DataSource, "Event Empty", Model.IsControlEditable))
            {
              @Model.MessageIsEmpty
            }
          }
          else
          {
            <div class="tb-eventlist-table-header d-none d-md-flex d-lg-flex tb-header-4 tb-font-bold">
              <div class="col-lg-3 col-md-4">Date</div>
              <div class="col-lg-7 col-md-5">Title</div>
              <div class="col-lg-2  col-md-3 tb-eventlist-place-header">Place</div>
            </div>
          }

          @if (Model.Rendering.DataSourceItem != null)
          {

            <div class="accordion col-12 "
                 data-properties='{&quot;expandOnHover&quot;:false,&quot;expandedByDefault&quot;:false,&quot;speed&quot;:500,&quot;easing&quot;:&quot;swing&quot;,&quot;canOpenMultiple&quot;:true,&quot;canToggle&quot;:true,&quot;isControlEditable&quot;:false}'>

              <ul class="items">
                @foreach (EventRenderingModel item in Model.EventItems)
                {
                  {
                    Html.RenderPartial("EventListEvent", item, new ViewDataDictionary
                                                              {
                                { "cssClass", ListsHelper.BuildCssClass(index, Model.EventItems.Count()) },
                                { "variantFields", Model.VariantFields }
                            });
                  }
                  index++;
                }
              </ul>
            </div>

          }
        </div>
      </div>
    </div>
  }
}
